// Generated by CoffeeScript 1.6.3
var controllerAbstract, controllerHello, di, dispatcher, main, serviceGreeter,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

di = (function() {
  function di() {
    this.serviceFactories = {};
    this.servicesByTags = {};
    this.services = {};
  }

  di.prototype.set = function(servicename, instance) {
    var _this = this;
    this.services[servicename] = instance;
    this['get' + this._ucfirst(servicename)] = function() {
      return _this.get(servicename)();
    };
    return this;
  };

  di.prototype.get = function(serviceName) {
    var _this = this;
    if (typeof this.services[serviceName] !== "undefined") {
      return (function() {
        return _this.services[serviceName];
      });
    }
    if (typeof this.serviceFactories[serviceName] === "function") {
      return (function() {
        return _this.services[serviceName] = _this.serviceFactories[serviceName](_this);
      });
    }
    if (typeof this.serviceFactories[serviceName] === "object") {
      if (typeof this.serviceFactories[serviceName]['factory'] !== "function") {
        throw {
          msg: 'service ' + serviceName + ' needs a factory configuration.',
          serviceName: serviceName
        };
      }
      if (!this.serviceFactories[serviceName]['shared']) {
        return (function() {
          return _this.serviceFactories[serviceName]['factory'](_this);
        });
      }
      return (function() {
        return _this.services[serviceName] = _this.serviceFactories[serviceName](_this);
      });
    }
    throw {
      msg: 'service ' + serviceName + ' doesnt exists.',
      serviceName: serviceName
    };
  };

  di.prototype._ucfirst = function(s) {
    return s.charAt(0).toUpperCase() + s.slice(1);
  };

  di.prototype.getByTag = function(tag) {
    var t, _results;
    if (!this.servicesByTags[tag]) {
      return [];
    }
    _results = [];
    for (t in this.servicesByTags[tag]) {
      _results.push(this.get(t));
    }
    return _results;
  };

  di.prototype.configure = function(configuration) {
    var factoryName, tag, tags, _i, _len,
      _this = this;
    if (configuration['factories']) {
      for (factoryName in configuration['factories']) {
        this.serviceFactories[factoryName] = configuration['factories'][factoryName];
        if (configuration['factories'][factoryName]['tag']) {
          tags = configuration['factories'][factoryName]['tag'];
          if (typeof tags === "string") {
            tags = [tags];
          }
          for (_i = 0, _len = tags.length; _i < _len; _i++) {
            tag = tags[_i];
            if (!this.servicesByTags[tag]) {
              this.servicesByTags[tag] = {};
            }
            this.servicesByTags[tag][factoryName] = factoryName;
          }
        }
        this['get' + (function(f) {
          return _this._ucfirst(f);
        })(factoryName)] = (function(f) {
          return function() {
            return _this.get(f)();
          };
        })(factoryName);
      }
    }
    return this;
  };

  return di;

})();

if (typeof module !== "undefined") {
  module.exports = di;
}

dispatcher = (function() {
  function dispatcher(di) {
    this.di = di;
  }

  dispatcher.prototype.dispatch = function(controller, action) {
    return this.dispatchRoute({
      action: action,
      controller: controller
    });
  };

  dispatcher.prototype.dispatchRoute = function(route) {
    var e;
    try {
      return this.di.get('controller' + route.controller)().dispatch(route);
    } catch (_error) {
      e = _error;
      if (e.msg) {
        console.log(e.msg);
      }
      if (e.message) {
        console.log(e.message);
      }
      console.log(e);
      throw "Controller " + route.controller + " doesnt exists?";
    }
  };

  return dispatcher;

})();

if (typeof module !== "undefined") {
  module.exports = dispatcher;
}

controllerAbstract = (function() {
  function controllerAbstract() {}

  controllerAbstract.prototype.getDom = function() {
    return this.dom;
  };

  controllerAbstract.prototype.dispatch = function(req) {
    if (req.action == null) {
      req.action = 'index';
    }
    if (typeof req.controller === "undefined") {
      throw {
        msg: 'request needs a controller',
        request: req
      };
    }
    if (!this[req.action + 'Action']) {
      throw {
        msg: 'action ' + req.action + 'Action' + ' for controller ' + req.controller + ' doesn\'t exists',
        request: req
      };
    }
    this.dom = req.dom || {};
    return this[req.action + 'Action'](req);
  };

  return controllerAbstract;

})();

module.exports = controllerAbstract;

controllerHello = (function(_super) {
  __extends(controllerHello, _super);

  function controllerHello(serviceGreeter) {
    this.serviceGreeter = serviceGreeter;
  }

  controllerHello.prototype.indexAction = function(req) {
    console.log('YAAYYYY!!');
    return console.log(this.serviceGreeter().greet('folks'));
  };

  return controllerHello;

})(controllerAbstract);

serviceGreeter = (function() {
  function serviceGreeter() {}

  serviceGreeter.prototype.greet = function(name) {
    return 'hello!! ' + name;
  };

  return serviceGreeter;

})();

if (typeof module !== "undefined") {
  module.exports = serviceGreeter;
}

main = (function() {
  function main() {}

  main.prototype.di = null;

  main.prototype.getContainer = function() {
    if (this.di) {
      return this.di;
    }
    this.di = new di;
    this.di.configure({
      factories: {
        dispatcher: function(di) {
          return new dispatcher(di);
        },
        controllerHello: function(di) {
          return new controllerHello(di.get('serviceGreeter'));
        },
        serviceGreeter: function() {
          return new serviceGreeter;
        }
      }
    });
    return this.di;
  };

  main.prototype.handle = function(request) {
    return this.getContainer().get('dispatcher')().dispatch(request.controller);
  };

  return main;

})();

(new main).handle({
  controller: 'Hello'
});
